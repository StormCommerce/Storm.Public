name: Enferno.Public - $(majorMinorVersion).$(semanticVersion)$(versionSuffix) -

trigger:
  - master
  - beta

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  majorMinorVersion: 2.5
  semanticVersion: $[counter(variables['majorMinorVersion'], 0)]
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    versionSuffix: ''
    buildConfiguration: 'Release'
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    versionSuffix: '-beta'
    buildConfiguration: 'Debug'
  version: $(majorMinorVersion).$(semanticVersion)
  versionAndSuffix: $(version)$(versionSuffix)

steps:
  - task: NuGetToolInstaller@1 # Ensure nuget is installed
    displayName: Install nuget

  - task: Assembly-Info-NetFramework@2
    displayName: Update version number in projects
    inputs:
      Path: '$(Build.SourcesDirectory)'
      FileNames: |
        **\AssemblyInfo.cs
      InsertAttributes: true
      FileEncoding: 'auto'
      WriteBOM: false
      VersionNumber: '$(version)'
      FileVersionNumber: '$(version)'
      InformationalVersion: '$(version)$(versionSuffix)'
      LogLevel: 'verbose'
      FailOnWarning: false
      DisableTelemetry: false

  - task: NuGetCommand@2
    displayName: Nuget Restore
    inputs:
      restoreSolution: '$(solution)' # nuget restore
      feedsToUse: 'select'
      vstsFeed: 'da90892f-4936-4382-9d6d-ab0feaa72091'
      includeNuGetOrg: true

  - task: MSBuild@1 # Run MSBuild and deploy to file system
    displayName: Build Solution
    inputs:
      solution: '$(solution)'
      msbuildArguments: '/p:DeployOnBuild=True /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=true /p:PublishProfile=$(buildConfiguration) /p:PublishUrl="$(Build.ArtifactStagingDirectory)/" /p:AssemblyVersion=$(version) /p:Version=$(versionAndSuffix)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Running unit tests
    inputs:
      nobuild: true
      command: 'test'
      projects: '**/*Test*/*.csproj'
      arguments: '--configuration $(buildConfiguration) /p:AssemblyVersion=$(version) /p:Version=$(versionAndSuffix)'


  - task: NuGetCommand@2
    displayName: Nuget Pack for nuget.org
    inputs:
      command: 'pack'
      packDestination: '$(Build.ArtifactStagingDirectory)\nugets'
      packagesToPack: '*.nuspec'
      includesymbols: false
      versioningScheme: byEnvVar
      versionEnvVar: versionAndSuffix
      verbosityPack: 'Detailed'

  - task: NuGetCommand@2
    displayName: Nuget Pack for azure feed
    inputs:
      command: 'pack'
      packDestination: '$(Build.ArtifactStagingDirectory)\nugetsymbols'
      packagesToPack: '*.nuspec'
      includesymbols: true
      versioningScheme: byEnvVar
      versionEnvVar: versionAndSuffix
      verbosityPack: 'Detailed'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Nuget Artifacts for nuget.org'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/nugets'
      ArtifactName: 'nugets'
    condition: succeeded()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Nuget Artifacts for azure feed'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/nugetsymbols'
      ArtifactName: 'nugetsymbols'
    condition: succeeded()